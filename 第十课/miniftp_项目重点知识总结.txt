一、知道miniftp的项目框架
       见【系统逻辑结构 图】

二、服务器中的进程组能否用线程替代， 若不能，请说明理由
      不能，理由为希望客户端之间相互独立

三、主动模式和被动模式分别是什么
      站在 服务器的角度 去看待模式的

四、主动模式的工作流程与被动模式的工作的简易流程
       主动模式:  1、客户端向服务器发送PORT命令，PORT命令会携带客户端的ip和port
                       2、服务接受port命令后，解析出客户端的ip和port进行保存
                       3、创建数据连接<服务器创建套接字，绑定20端口，然后connect>
       被动模式：1、客户端向服务器发送PASV命令，请求服务器建立连接
                        2、服务器收到PASV命令后，服务器创建一个套接字,绑定和监听，并返回此次的临时端口，然后将其ip和port进行格式化发送给客户端
                        3、创建数据连接<客户端发起connect, 服务器在监听套接字下进行接收连接accept>

五、主动和被动模式是如何通过父进程进行辅助连接的
       这个问题就牵扯到ftp服务进程和父进程nobody之间通讯协议问题
      其次，要明白父子进程的通讯协议是如何实现以及通讯过程和流程
      nobody进程只服务于ftp服务进程，不接受客户端的任何请求
      nobody进程最大的两个用途，一是协助ftp进程进行数据连接，二是协助ftp进程进行20端口的绑定

六、为什么ftp会存在两种数据连接模式
      主要原因为部署服务器的时候，需要考虑防火墙或NAT的影响

七、核心技术之一：用户的鉴权登录
       必须要理解和掌握鉴权登录的实现过程
       掌握加密函数crypt();


八、主动模式下，为什么服务器要绑定20端口
       协议规定

九、项目简介：提供文件存储和访问，实现信息共享的工具<文件传输工具>
      开发环境：CentOs7、C/C++ 、gcc、Makefile、Editplus、LeapFtp
      主要技术：socket、进程、命令映射、hashtable
      项目功能：
          0、实现了用户的鉴权登录
          1、实现了miniftp的主被动连接
          2、实现了ftp一些命令：USER  PASS PORT  PASV  LIST  SIZE CWD  RNFR/RNTO STOR  RETR MKD RMD......
          3、实现了文件的上传和下载，并支持断点续载和续传
          4、实现了数据传输的限速功能
          //5、实现了对配置文件的解析
          6、实现了系统的空闲断开，包括控制连接空闲断开和数据连接空闲断开
          7、实现了系统的连接数限制，包括最大连接数限制和每ip的连接数限制
      项目难点：
           1、nobody进程协助ftp进程创建数据连接和20端口的绑定
           2、数据连接过程中的主动模式与被动模式的理解
           3、实现每ip连接数限制的时候，为什么需要维护两个hash表
 
















